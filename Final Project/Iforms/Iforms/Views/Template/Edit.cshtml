@{
    ViewData["Title"] = "Edit Template";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
<style>
    /* Custom Modal Styles - No Backdrop */
    .custom-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .custom-modal-dialog {
        background: white;
        border-radius: 8px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }
    
    .custom-modal-content {
        display: flex;
        flex-direction: column;
    }
    
    .custom-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
    }
    
    .custom-modal-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 500;
    }
    
    .custom-modal-body {
        padding: 1rem;
        flex: 1;
    }
    
    .custom-modal-footer {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
    }
    
    .btn-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #6c757d;
    }
    
    .btn-close:hover {
        color: #000;
    }
    
    /* User Search Styles */
    .user-suggestions-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #dee2e6;
        border-top: none;
        border-radius: 0 0 0.375rem 0.375rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
    }
    
    .user-suggestion-item {
        padding: 0.5rem 1rem;
        cursor: pointer;
        border-bottom: 1px solid #f8f9fa;
        transition: background-color 0.2s;
    }
    
    .user-suggestion-item:hover {
        background-color: #f8f9fa;
    }
    
    .user-suggestion-item.active {
        background-color: #007bff;
        color: white;
    }
    
    .user-suggestion-item.active .user-name {
        color: white;
    }
    
    .user-suggestion-item.active .user-email {
        color: rgba(255, 255, 255, 0.8);
    }
    
    .user-suggestion-item:last-child {
        border-bottom: none;
    }
    
    .user-suggestion-item .user-name {
        font-weight: 500;
        color: #212529;
    }
    
    .user-suggestion-item .user-email {
        font-size: 0.875rem;
        color: #6c757d;
    }
    
    .selected-users-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }
    
    .selected-user-badge {
        display: inline-flex;
        align-items: center;
        background-color: #007bff;
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        gap: 0.5rem;
    }
    
    .selected-user-badge .remove-user {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0;
        font-size: 1rem;
        line-height: 1;
        opacity: 0.8;
        transition: opacity 0.2s;
    }
    
    .selected-user-badge .remove-user:hover {
        opacity: 1;
    }
    
    .no-users-message {
        color: #6c757d;
        font-style: italic;
        font-size: 0.875rem;
    }
</style>

@model Iforms.BLL.DTOs.TemplateDTO

<div class="container mt-4">
    <h2>Edit Template</h2>
    <div class="template-content-area">
        <form id="templateForm" asp-action="Edit" method="post" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="mb-3">
                <label asp-for="Title" class="form-label">Title</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Description" class="form-label">Description</label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label for="TemplateImage" class="form-label">Template Image</label>
                @if (!string.IsNullOrEmpty(Model.ImageUrl))
                {
                    <div id="image-container" class="text-center mb-2">
                        <img src="@Model.ImageUrl" alt="Template Image" style="max-width: 200px; max-height: 200px; display: inline-block;" />
                        <br />
                        <button type="button" id="deleteImageBtn" class="btn btn-sm btn-danger mt-1">Delete Image</button>
                    </div>
                    <p class="form-text text-center">Current image. Upload a new one to replace it.</p>
                }
                <input type="file" name="TemplateImage" class="form-control" accept="image/*" />
                <input type="hidden" asp-for="ImageUrl" id="imageUrlInput" />
                <span asp-validation-for="ImageUrl" class="text-danger"></span>
            </div>
            <div class="mb-3 form-check">
                <input asp-for="IsPublic" class="form-check-input" />
                <label asp-for="IsPublic" class="form-check-label">Is Public</label>
                <span asp-validation-for="IsPublic" class="text-danger"></span>
            </div>
            <div class="mb-3">
                <label class="form-label">Topic <span class="text-danger">*</span></label>
                <div class="position-relative">
                    <select class="form-select" id="topicSelect" required>
                        <option value="">Select a topic for your template...</option>
                    </select>
                    <input type="hidden" id="selectedTopicId" name="Topic.Id" value="@Model.Topic?.Id" />
                    <input type="hidden" id="selectedTopicType" name="Topic.TopicType" value="@Model.Topic?.TopicType" />
                    <div class="invalid-feedback" id="topicValidationMessage" style="display: none;">
                        Please select a topic for your template.
                    </div>
                </div>
            </div>
            <div class="mb-3">
                <label class="form-label">Template Tags</label>
                <input type="text" class="form-control" id="templateTags" name="TemplateTagsInput" 
                       value="@(Model.TemplateTags != null ? string.Join(", ", Model.TemplateTags.Select(t => t.Name)) : "")" 
                       placeholder="Enter tags separated by commas (e.g., survey, feedback, research)" />
                <div class="form-text">Enter tags separated by commas to help categorize your template</div>
            </div>
            <hr />
            <h4>Questions</h4>
            <div id="questionsList" class="mb-3"></div>
            <button type="button" class="btn btn-outline-primary mb-3" id="addQuestionBtn">+ Add Question</button>
            <hr />
            <h4>Share with Users</h4>
            <div id="shareUsers" class="mb-3">
                <div class="position-relative">
                    <input type="text" class="form-control mb-2" id="userSearch" placeholder="Search users to share..." />
                    <div id="userSuggestions" class="user-suggestions-dropdown" style="display: none;"></div>
                </div>
                <div id="selectedUsers" class="selected-users-container"></div>
                <input type="hidden" id="selectedUserIds" name="SelectedUserIds" />
            </div>
            <button type="submit" class="btn btn-success">Update Template</button>
            <a href="@Url.Action("UserTemplates", "UserDashboard")" class="btn btn-secondary">Cancel</a>
        </form>
    </div>
</div>

<!-- Topic Creation Modal -->
<div id="topicModal" class="custom-modal" style="display: none;">
    <div class="custom-modal-dialog">
        <div class="custom-modal-content">
            <div class="custom-modal-header">
                <h5 class="custom-modal-title">Create New Topic</h5>
                <button type="button" class="btn-close" id="closeTopicModal" aria-label="Close">&times;</button>
            </div>
            <div class="custom-modal-body">
                <form id="topicForm">
                    <div class="mb-3">
                        <label for="newTopicType" class="form-label">Topic Type</label>
                        <input type="text" class="form-control" id="newTopicType" required />
                    </div>
                </form>
            </div>
            <div class="custom-modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelTopicBtn">Cancel</button>
                <button type="button" class="btn btn-primary" id="createTopicBtn">Create Topic</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let questions = [];
        let questionId = 0;
        const questionsList = document.getElementById('questionsList');
        const addQuestionBtn = document.getElementById('addQuestionBtn');
        const templateForm = document.getElementById('templateForm');
        const topicSelect = document.getElementById('topicSelect');
        const selectedTopicId = document.getElementById('selectedTopicId');
        const selectedTopicType = document.getElementById('selectedTopicType');

        // Initialize questions from model data
        @if (Model.Questions != null && Model.Questions.Any())
        {
            <text>
            questions = @Html.Raw(Json.Serialize(Model.Questions.Select((q, index) => new {
                id = q.Id > 0 ? q.Id : index + 1,
                text = q.QuestionTitle,
                type = q.QuestionType.ToString(),
                options = q.Options ?? new List<string> { "" },
                order = q.QuestionOrder,
                isMandatory = q.IsMandatory
            })));
            questionId = questions.length > 0 ? Math.max(...questions.map(q => q.id)) : 0;
            // Ensure options are arrays, not JSON strings or arrays with a single JSON string
            questions.forEach(q => {
                if (typeof q.options === 'string') {
                    try {
                        q.options = JSON.parse(q.options);
                    } catch (e) {
                        q.options = [];
                    }
                }
                if (Array.isArray(q.options) && q.options.length === 1 && typeof q.options[0] === 'string' && q.options[0].trim().startsWith('[')) {
                    try {
                        q.options = JSON.parse(q.options[0]);
                    } catch (e) {
                        // leave as is
                    }
                }
            });
            </text>
        }

        // QuestionType enum values
        const questionTypes = [
            { value: 'Text', label: 'Single-line Text' },
            { value: 'LongText', label: 'Multiple-line Text' },
            { value: 'Number', label: 'Non-negative Integer' },
            { value: 'Checkbox', label: 'Checkbox' },
            { value: 'Date', label: 'Date' },
            { value: 'FileUpload', label: 'File Upload' }
        ];

        // SignalR setup
        const connection = new signalR.HubConnectionBuilder().withUrl("/questionHub").build();
        connection.start().catch(err => {
        });
        connection.on("QuestionAdded", q => addQuestionUI(q, false));
        connection.on("QuestionOrderUpdated", qs => renderQuestions(qs, false));

        // Topic dropdown functionality
        // Load all topics into dropdown
        async function loadTopics() {
            try {
                const response = await fetch('/Template/GetAllTopics');
                const topics = await response.json();
                
                // Clear existing options except the first one
                const topicSelect = document.getElementById('topicSelect');
                topicSelect.innerHTML = '<option value="">Select a topic for your template...</option>';
                
                // Add existing topics (use id as value, topicType as text, and store topicType in data-type)
                topics.forEach(topic => {
                    const option = document.createElement('option');
                    option.value = topic.id;
                    option.textContent = topic.topicType;
                    option.dataset.type = topic.topicType;
                    topicSelect.appendChild(option);
                });
                
                // Add "Add New Topic" option at the bottom
                const addNewOption = document.createElement('option');
                addNewOption.value = 'add_new';
                addNewOption.textContent = '+ Add New Topic...';
                addNewOption.style.fontWeight = 'bold';
                addNewOption.style.color = '#28a745';
                topicSelect.appendChild(addNewOption);
                
            } catch (error) {
            }
        }
        
        // Load topics when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadTopics().then(() => {
                const selectedTopicId = document.getElementById('selectedTopicId');
                const selectedTopicType = document.getElementById('selectedTopicType');
                const topicSelect = document.getElementById('topicSelect');
                const currentTopicId = selectedTopicId.value;
                if (currentTopicId) {
                    // Ensure both are strings for comparison
                    topicSelect.value = String(currentTopicId);
                    // Find the option and set selected if needed
                    for (let i = 0; i < topicSelect.options.length; i++) {
                        if (topicSelect.options[i].value === String(currentTopicId)) {
                            topicSelect.selectedIndex = i;
                            selectedTopicType.value = topicSelect.options[i].dataset.type;
                            topicSelect.classList.add('is-valid');
                            break;
                        }
                    }
                }
            });

            // Render existing questions
            renderQuestions(questions, false);

            const deleteImageBtn = document.getElementById('deleteImageBtn');
            if (deleteImageBtn) {
                deleteImageBtn.addEventListener('click', async function() {
                    if (!confirm('Are you sure you want to delete the template image?')) {
                        return;
                    }

                    const templateId = @Model.Id;
                    try {
                        const response = await fetch(`/Template/DeleteImage/${templateId}`, {
                            method: 'POST',
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                            }
                        });

                        const result = await response.json();
                        if (result.success) {
                            const imageContainer = document.getElementById('image-container');
                            if (imageContainer) {
                                imageContainer.style.display = 'none';
                            }
                            const imageUrlInput = document.getElementById('imageUrlInput');
                            if (imageUrlInput) {
                                imageUrlInput.value = '';
                            }
                        }
                    } catch (error) {
                        alert('An error occurred while deleting the image.');
                    }
                });
            }

            // Initialize selected users from model if available
            @if (Model.TemplateAccesses != null && Model.TemplateAccesses.Any())
            {
                <text>
                selectedUsers = @Html.Raw(Json.Serialize(Model.TemplateAccesses.Select(u => new {
                    id = u.Id,
                    name = u.UserName,
                    email = u.UserEmail
                })));
                </text>
            }
            updateSelectedUsersDisplay();
        });
        
        function showTopicModal() {
            const modal = document.getElementById('topicModal');
            modal.style.display = 'flex';
            // Focus on the input field
            setTimeout(() => {
                document.getElementById('newTopicType').focus();
            }, 100);
        }
        
        function hideTopicModal() {
            const modal = document.getElementById('topicModal');
            modal.style.display = 'none';
            // Clear the input
            document.getElementById('newTopicType').value = '';
        }
        
        // Add event listeners for modal close buttons
        document.getElementById('closeTopicModal').addEventListener('click', hideTopicModal);
        document.getElementById('cancelTopicBtn').addEventListener('click', hideTopicModal);
        
        // Close modal when clicking outside
        document.getElementById('topicModal').addEventListener('click', function(e) {
            if (e.target === this) {
                hideTopicModal();
            }
        });
        
        topicSelect.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (this.value === 'add_new') {
                // Show modal for creating new topic
                showTopicModal();
                // Reset the select to current value
                this.value = selectedTopicId.value || '';
                return;
            }
            if (this.value) {
                selectedTopicId.value = this.value;
                selectedTopicType.value = selectedOption.dataset.type;
                // Clear validation error
                const topicValidationMessage = document.getElementById('topicValidationMessage');
                topicValidationMessage.style.display = 'none';
                topicSelect.classList.remove('is-invalid');
                topicSelect.classList.add('is-valid');
            } else {
                selectedTopicId.value = '';
                selectedTopicType.value = '';
                topicSelect.classList.remove('is-valid');
            }
        });

        // Topic creation functionality
        document.getElementById('createTopicBtn').addEventListener('click', async function() {
            const topicType = document.getElementById('newTopicType').value.trim();
            
            if (!topicType) {
                alert('Please enter a topic type');
                return;
            }

            try {
                const response = await fetch('/Template/CreateTopic', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ topicType: topicType })
                });

                const result = await response.json();
                
                if (response.ok && result.success) {
                    // Refresh the dropdown to get the new topic
                    await loadTopics();
                    
                    // Select the newly created topic
                    const topicSelect = document.getElementById('topicSelect');
                    const newTopicOption = Array.from(topicSelect.options).find(option => 
                        option.value === topicType
                    );
                    if (newTopicOption) {
                        topicSelect.value = topicType;
                        topicSelect.dispatchEvent(new Event('change'));
                    }
                    
                    // Close the modal properly
                    hideTopicModal();
                    
                    // Show success message
                    alert('Topic created successfully!');
                } else {
                    alert(result.message || 'Failed to create topic');
                }
            } catch (error) {
                alert('Error creating topic');
            }
        });

        addQuestionBtn.onclick = function() {
            // Count current questions per type
            const typeCounts = {
                Text: questions.filter(q => q.type === 'Text').length,
                LongText: questions.filter(q => q.type === 'LongText').length,
                Number: questions.filter(q => q.type === 'Number').length,
                Checkbox: questions.filter(q => q.type === 'Checkbox').length
            };
            // Default type for new question
            const defaultType = 'Text';
            // If the default type is at limit, pick the next available type
            let selectedType = defaultType;
            if (typeCounts[selectedType] >= 4) {
                selectedType = Object.keys(typeCounts).find(type => typeCounts[type] < 4);
                if (!selectedType) {
                    alert('You have reached the maximum number of questions for all types (4 each).');
                    return;
                }
            }
            if (typeCounts[selectedType] >= 4) {
                alert('You can only add up to 4 questions of this type.');
                return;
            }
            const q = { id: ++questionId, text: '', type: selectedType, options: [''], isMandatory: true };
            questions.push(q);
            addQuestionUI(q, true);
            connection.invoke("AddQuestion", q);
        };

        function addQuestionUI(q, local = true) {
            const qDiv = document.createElement('div');
            qDiv.className = 'card mb-2 question-card';
            qDiv.setAttribute('data-id', q.id);
            
            // Generate options for the dropdown
            const optionsHtml = questionTypes.map(type => 
                `<option value="${type.value}" ${q.type === type.value ? 'selected' : ''}>${type.label}</option>`
            ).join('');

            // Generate options inputs
            const optionsInputs = q.options.map((option, index) => 
                `<input type="text" class="form-control mb-1 option-input" value="${option}" data-option-index="${index}" />`
            ).join('');

            qDiv.innerHTML = `
                <div class="card-body">
                    <input type="text" class="form-control mb-2 question-title" placeholder="Untitled Question" value="${q.text || ''}" />
                    <select class="form-select mb-2 question-type">
                        ${optionsHtml}
                    </select>
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input is-mandatory-checkbox" id="isMandatory${q.id}" ${q.isMandatory ? 'checked' : ''}>
                        <label class="form-check-label" for="isMandatory${q.id}">Mandatory</label>
                    </div>
                    <div class="options-section" style="display: ${q.type === 'Checkbox' ? 'block' : 'none'};">
                        <h5>Options:</h5>
                        <div class="options-list mb-2">
                            ${optionsInputs}
                            <button type="button" class="btn btn-sm btn-outline-secondary add-option-btn">+ Add option</button>
                        </div>
                    </div>
                    <button type="button" class="btn btn-danger btn-sm remove-question-btn">Delete</button>
                </div>`;
            questionsList.appendChild(qDiv);
            if (local) {
                questions.push(q);
            }

            // Add option button functionality
            qDiv.querySelector('.add-option-btn').onclick = function() {
                const optionsList = qDiv.querySelector('.options-list');
                const currentOptions = qDiv.querySelectorAll('.option-input').length;
                if (currentOptions >= 4) {
                    alert('You can only add up to 4 options for a question.');
                    return;
                }
                const newOptionIndex = currentOptions;
                const newOptionInput = document.createElement('input');
                newOptionInput.type = 'text';
                newOptionInput.className = 'form-control mb-1 option-input';
                newOptionInput.setAttribute('data-option-index', newOptionIndex);
                newOptionInput.value = `Option ${newOptionIndex + 1}`;
                // Insert before the add button
                const addButton = qDiv.querySelector('.add-option-btn');
                optionsList.insertBefore(newOptionInput, addButton);
                // Update the question's options array
                const questionIndex = questions.findIndex(question => question.id === q.id);
                if (questionIndex !== -1) {
                    questions[questionIndex].options.push(`Option ${newOptionIndex + 1}`);
                }
            };

            // Remove question functionality
            qDiv.querySelector('.remove-question-btn').onclick = function() {
                questions = questions.filter(x => x.id !== q.id);
                qDiv.remove();
            };

            // Update question data when inputs change
            qDiv.querySelector('.question-title').oninput = function() {
                const questionIndex = questions.findIndex(question => question.id === q.id);
                if (questionIndex !== -1) {
                    questions[questionIndex].text = this.value;
                }
            };

            // Update question type dropdown to disable types at limit
            const typeSelect = qDiv.querySelector('.question-type');
            const optionsSection = qDiv.querySelector('.options-section');
            function updateOptionsVisibility() {
                optionsSection.style.display = typeSelect.value === 'Checkbox' ? 'block' : 'none';
            }
            updateOptionsVisibility();
            typeSelect.addEventListener('change', updateOptionsVisibility);
            typeSelect.querySelectorAll('option').forEach(option => {
                const type = option.value;
                const count = questions.filter(qq => qq.type === type).length;
                if (type === q.type) {
                    option.disabled = false;
                } else if (['Text','LongText','Number','Checkbox'].includes(type) && count >= 4) {
                    option.disabled = true;
                } else {
                    option.disabled = false;
                }
            });

            // When type changes, enforce per-type limit
            typeSelect.onchange = function() {
                const newType = this.value;
                const count = questions.filter(qq => qq.type === newType).length;
                if (['Text','LongText','Number','Checkbox'].includes(newType) && count >= 4) {
                    alert('You can only add up to 4 questions of this type.');
                    this.value = q.type;
                    return;
                }
                const questionIndex = questions.findIndex(question => question.id === q.id);
                if (questionIndex !== -1) {
                    questions[questionIndex].type = newType;
                }
                // Update dropdown disables
                typeSelect.querySelectorAll('option').forEach(option => {
                    const type = option.value;
                    const count = questions.filter(qq => qq.type === type).length;
                    if (type === newType) {
                        option.disabled = false;
                    } else if (['Text','LongText','Number','Checkbox'].includes(type) && count >= 4) {
                        option.disabled = true;
                    } else {
                        option.disabled = false;
                    }
                });
                updateOptionsVisibility();
            };

            // Update options when option inputs change
            qDiv.querySelectorAll('.option-input').forEach(input => {
                input.oninput = function() {
                    const questionIndex = questions.findIndex(question => question.id === q.id);
                    if (questionIndex !== -1) {
                        const optionIndex = parseInt(this.getAttribute('data-option-index'));
                        questions[questionIndex].options[optionIndex] = this.value;
                    }
                };
            });

            // Add event listener for isMandatory checkbox
            const isMandatoryCheckbox = qDiv.querySelector('.is-mandatory-checkbox');
            isMandatoryCheckbox.checked = q.isMandatory || false;
            isMandatoryCheckbox.onchange = function() {
                const questionIndex = questions.findIndex(question => question.id === q.id);
                if (questionIndex !== -1) {
                    questions[questionIndex].isMandatory = this.checked;
                }
            };
        }

        function renderQuestions(qs, local = true) {
            questionsList.innerHTML = '';
            (qs || questions).forEach(q => addQuestionUI(q, false));
        }

        // Enable drag-and-drop reordering with SortableJS
        const sortable = new Sortable(questionsList, {
            animation: 150,
            handle: '.card-body',
            onEnd: function (evt) {
                // Update questions array order
                const newOrder = Array.from(questionsList.children).map(div => {
                    const id = parseInt(div.getAttribute('data-id'));
                    return questions.find(q => q.id === id);
                });
                questions = newOrder;
                connection.invoke("UpdateQuestionOrder", questions);
            }
        });

        // Form submission
        templateForm.onsubmit = function(e) {
            e.preventDefault();
            
            // Validate topic selection
            if (!selectedTopicId.value || !selectedTopicType.value) {
                const topicValidationMessage = document.getElementById('topicValidationMessage');
                topicValidationMessage.style.display = 'block';
                topicSelect.classList.add('is-invalid');
                return false;
            } else {
                const topicValidationMessage = document.getElementById('topicValidationMessage');
                topicValidationMessage.style.display = 'none';
                topicSelect.classList.remove('is-invalid');
            }
            
            // Update all question data from the UI
            questions.forEach((question, index) => {
                const questionDiv = questionsList.querySelector(`[data-id="${question.id}"]`);
                if (questionDiv) {
                    question.text = questionDiv.querySelector('.question-title').value;
                    question.type = questionDiv.querySelector('.question-type').value;
                    question.isMandatory = questionDiv.querySelector('.is-mandatory-checkbox').checked;
                    // Update options
                    question.options = [];
                    questionDiv.querySelectorAll('.option-input').forEach(input => {
                        question.options.push(input.value);
                    });
                }
            });

            // Create hidden inputs for questions
            questions.forEach((question, index) => {
                // Remove existing hidden inputs for this question
                const existingInputs = templateForm.querySelectorAll(`[name^="Questions[${index}]"]`);
                existingInputs.forEach(input => input.remove());

                // Create new hidden inputs
                const questionIdInput = document.createElement('input');
                questionIdInput.type = 'hidden';
                questionIdInput.name = `Questions[${index}].Id`;
                questionIdInput.value = question.id;

                const questionTitleInput = document.createElement('input');
                questionTitleInput.type = 'hidden';
                questionTitleInput.name = `Questions[${index}].QuestionTitle`;
                questionTitleInput.value = question.text;

                const questionDescInput = document.createElement('input');
                questionDescInput.type = 'hidden';
                questionDescInput.name = `Questions[${index}].QuestionDescription`;
                questionDescInput.value = question.text; // Using title as description for now

                const questionTypeInput = document.createElement('input');
                questionTypeInput.type = 'hidden';
                questionTypeInput.name = `Questions[${index}].QuestionType`;
                questionTypeInput.value = question.type;

                const questionOrderInput = document.createElement('input');
                questionOrderInput.type = 'hidden';
                questionOrderInput.name = `Questions[${index}].QuestionOrder`;
                questionOrderInput.value = index;

                const showInResultsInput = document.createElement('input');
                showInResultsInput.type = 'hidden';
                showInResultsInput.name = `Questions[${index}].ShowInResultsTable`;
                showInResultsInput.value = 'true';

                const isMandatoryInput = document.createElement('input');
                isMandatoryInput.type = 'hidden';
                isMandatoryInput.name = `Questions[${index}].IsMandatory`;
                isMandatoryInput.value = question.isMandatory ? 'true' : 'false';

                // Add options as JSON string
                const optionsInput = document.createElement('input');
                optionsInput.type = 'hidden';
                optionsInput.name = `Questions[${index}].Options`;
                optionsInput.value = JSON.stringify(question.options);

                templateForm.appendChild(questionIdInput);
                templateForm.appendChild(questionTitleInput);
                templateForm.appendChild(questionDescInput);
                templateForm.appendChild(questionTypeInput);
                templateForm.appendChild(questionOrderInput);
                templateForm.appendChild(showInResultsInput);
                templateForm.appendChild(isMandatoryInput);
                templateForm.appendChild(optionsInput);
            });
            
            try {
                // Submit the form
                templateForm.submit();
            } catch (error) {
                alert('Error submitting form. Please try again.');
            }
        };

        // User search functionality
        let selectedUsers = [];
        let searchTimeout;
        
        const userSearch = document.getElementById('userSearch');
        const userSuggestions = document.getElementById('userSuggestions');
        const selectedUsersContainer = document.getElementById('selectedUsers');
        const selectedUserIdsInput = document.getElementById('selectedUserIds');
        
        // Debounced search function
        userSearch.addEventListener('input', function() {
            const term = this.value.trim();
            
            // Clear previous timeout
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }
            
            // Hide suggestions if search term is too short
            if (term.length < 2) {
                hideSuggestions();
                return;
            }
            
            // Set timeout for search
            searchTimeout = setTimeout(() => {
                searchUsers(term);
            }, 300);
        });
        
        // Hide suggestions when clicking outside
        document.addEventListener('click', function(e) {
            if (!userSearch.contains(e.target) && !userSuggestions.contains(e.target)) {
                hideSuggestions();
            }
        });
        
        // Handle keyboard navigation
        userSearch.addEventListener('keydown', function(e) {
            const visibleSuggestions = userSuggestions.querySelectorAll('.user-suggestion-item');
            
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                navigateSuggestions(1, visibleSuggestions);
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                navigateSuggestions(-1, visibleSuggestions);
            } else if (e.key === 'Enter') {
                e.preventDefault();
                const activeSuggestion = userSuggestions.querySelector('.user-suggestion-item.active');
                if (activeSuggestion) {
                    selectUser(activeSuggestion.dataset.userId, activeSuggestion.dataset.userName, activeSuggestion.dataset.userEmail);
                }
            } else if (e.key === 'Escape') {
                hideSuggestions();
            }
        });
        
        async function searchUsers(term) {
            try {
                const response = await fetch(`/Template/SearchUsers?term=${encodeURIComponent(term)}`);
                if (!response.ok) {
                    throw new Error('Search failed');
                }
                
                const users = await response.json();
                displaySuggestions(users);
            } catch (error) {
                hideSuggestions();
            }
        }
        
        function displaySuggestions(users) {
            // Filter out already selected users
            const availableUsers = users.filter(user => 
                !selectedUsers.some(selected => selected.id === parseInt(user.id))
            );
            
            if (availableUsers.length === 0) {
                userSuggestions.innerHTML = '<div class="user-suggestion-item no-users-message">No users found or all users already selected</div>';
            } else {
                userSuggestions.innerHTML = availableUsers.map(user => `
                    <div class="user-suggestion-item" 
                         data-user-id="${user.id}" 
                         data-user-name="${user.name}" 
                         data-user-email="${user.email}">
                        <div class="user-name">${user.name}</div>
                        <div class="user-email">${user.email}</div>
                    </div>
                `).join('');
                
                // Add click event listeners
                userSuggestions.querySelectorAll('.user-suggestion-item').forEach(item => {
                    if (!item.classList.contains('no-users-message')) {
                        item.addEventListener('click', function() {
                            selectUser(
                                this.dataset.userId,
                                this.dataset.userName,
                                this.dataset.userEmail
                            );
                        });
                    }
                });
            }
            
            userSuggestions.style.display = 'block';
        }
        
        function hideSuggestions() {
            userSuggestions.style.display = 'none';
            userSuggestions.innerHTML = '';
        }
        
        function navigateSuggestions(direction, suggestions) {
            const currentActive = userSuggestions.querySelector('.user-suggestion-item.active');
            let nextIndex = 0;
            
            if (currentActive) {
                const currentIndex = Array.from(suggestions).indexOf(currentActive);
                nextIndex = currentIndex + direction;
                
                if (nextIndex < 0) nextIndex = suggestions.length - 1;
                if (nextIndex >= suggestions.length) nextIndex = 0;
                
                currentActive.classList.remove('active');
            }
            
            if (suggestions[nextIndex]) {
                suggestions[nextIndex].classList.add('active');
            }
        }
        
        function selectUser(userId, userName, userEmail) {
            // Convert userId to number for consistent type handling
            const userIdNum = parseInt(userId);
            
            // Check if user is already selected
            if (selectedUsers.some(user => user.id === userIdNum)) {
                return;
            }
            
            // Add user to selected users
            selectedUsers.push({
                id: userIdNum,
                name: userName,
                email: userEmail
            });
            
            // Update UI
            updateSelectedUsersDisplay();
            
            // Clear search input and hide suggestions
            userSearch.value = '';
            hideSuggestions();
            
            // Update hidden input for form submission
            updateSelectedUserIdsInput();
        }
        
        function removeUser(userId) {
            // Convert userId to number for proper comparison
            const userIdNum = parseInt(userId);
            selectedUsers = selectedUsers.filter(user => user.id !== userIdNum);
            updateSelectedUsersDisplay();
            updateSelectedUserIdsInput();
        }
        
        function updateSelectedUsersDisplay() {
            if (selectedUsers.length === 0) {
                selectedUsersContainer.innerHTML = '<div class="no-users-message">No users selected for sharing</div>';
            } else {
                selectedUsersContainer.innerHTML = selectedUsers.map(user => `
                    <div class="selected-user-badge">
                        <span>${user.name} (${user.email})</span>
                        <button type="button" class="remove-user" onclick="removeUser('${user.id}')" title="Remove user">&times;</button>
                    </div>
                `).join('');
            }
        }
        
        function updateSelectedUserIdsInput() {
            const userIds = selectedUsers.map(user => user.id);
            selectedUserIdsInput.value = userIds.join(',');
        }
    </script>
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
