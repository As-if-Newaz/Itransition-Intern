@model Iforms.MVC.Models.UserTemplatesViewModel
@{
    ViewData["Title"] = "Manage Templates";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

<style>
    .user-templates-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 20px 0;
    }

    .templates-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    .templates-table th {
        background-color: #f8f9fa;
        padding: 12px;
        text-align: left;
        border-bottom: 2px solid #dee2e6;
        font-weight: 600;
        color: #495057;
    }

    .templates-table td {
        padding: 12px;
        border-bottom: 1px solid #dee2e6;
        vertical-align: middle;
    }

    .templates-table tbody tr {
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .templates-table tbody tr:hover {
        background-color: #f8f9fa;
    }

    .template-title {
        font-weight: 500;
        color: #007bff;
        text-decoration: none;
    }

    .template-title:hover {
        text-decoration: underline;
    }

    .status-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 500;
        text-transform: uppercase;
    }

    .status-public {
        background-color: #d4edda;
        color: #155724;
    }

    .status-private {
        background-color: #f8d7da;
        color: #721c24;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 30px;
        gap: 10px;
    }

    .pagination-info {
        color: #6c757d;
        font-size: 14px;
    }

    .page-link {
        display: inline-block;
        padding: 8px 12px;
        margin: 0 2px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        text-decoration: none;
        color: #007bff;
        background-color: white;
        transition: all 0.2s ease;
    }

    .page-link:hover {
        background-color: #e9ecef;
        border-color: #adb5bd;
        text-decoration: none;
        color: #0056b3;
    }

    .page-link.active {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
    }

    .page-link.disabled {
        color: #6c757d;
        pointer-events: none;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }

    .no-templates {
        text-align: center;
        padding: 40px;
        color: #6c757d;
    }

    .create-template-btn {
        display: inline-block;
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        margin-bottom: 20px;
        transition: background-color 0.2s ease;
    }

    .create-template-btn:hover {
        background-color: #218838;
        color: white;
        text-decoration: none;
    }
</style>

<div class="user-templates-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 data-i18n="manage_templates">My Templates</h2>
        <a href="@Url.Action("Create", "Template")" class="create-template-btn">
            <i class="fas fa-plus"></i> <span data-i18n="create_template">Create New Template</span>
        </a>
    </div>

    @if (!Model.Templates.Any())
    {
        <div class="no-templates">
            <h4 data-i18n="no_templates">No templates found</h4>
            <p data-i18n="no_templates_desc">You haven't created any templates yet. Start by creating your first template!</p>
            <a href="@Url.Action("Create", "Template")" class="create-template-btn">
                <i class="fas fa-plus"></i> <span data-i18n="create_template">Create Your First Template</span>
            </a>
        </div>
    }
    else
    {
        <div class="navbar navbar-expand-lg navbar-light bg-secondary-subtle mb-3">
            <button id="deleteTemplatesBtn" class="btn btn-outline-danger"><i class="fas fa-trash-alt"></i> <span data-i18n="delete">Delete</span></button>
        </div>

        <table class="templates-table">
            <thead>
                <tr>
                    <th><input type="checkbox" id="selectAllTemplates" title="Select/Deselect all"></th>
                    <th data-i18n="title">Title</th>
                    <th data-i18n="created_at">Created At</th>
                    <th data-i18n="status">Status</th>
                    <th data-i18n="description">Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var template in Model.Templates)
                {
                    <tr onclick="if(event.target.type !== 'checkbox'){window.location.href='@Url.Action("Edit", "Template", new { id = template.Id })'}">
                        <td><input type="checkbox" class="select-template" value="@template.Id" onclick="event.stopPropagation();"></td>
                        <td>
                            <a href="@Url.Action("Edit", "Template", new { id = template.Id })" class="template-title">
                                @template.Title
                            </a>
                        </td>
                        <td>@template.CreatedAt.ToString("MMM dd, yyyy")</td>
                        <td>
                            <span class="status-badge @(template.IsPublic ? "status-public" : "status-private")">
                                @(template.IsPublic ? "Public" : "Private")
                            </span>
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(template.Description))
                            {
                                <span title="@template.Description">
                                    @(template.Description.Length > 50 ? template.Description.Substring(0, 50) + "..." : template.Description)
                                </span>
                            }
                            else
                            {
                                <span class="text-muted" data-i18n="no_description">No Description</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (Model.TotalPages > 1)
        {
            <div class="pagination-container">
                <div class="pagination-info">
                    Showing @(((Model.CurrentPage - 1) * Model.PageSize) + 1) to @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCount) of @Model.TotalCount templates
                </div>
                
                <div class="pagination">
                    @if (Model.HasPreviousPage)
                    {
                        <a href="@Url.Action("UserTemplates", new { page = Model.CurrentPage - 1 })" class="page-link">
                            <i class="fas fa-chevron-left"></i> Previous
                        </a>
                    }
                    else
                    {
                        <span class="page-link disabled">
                            <i class="fas fa-chevron-left"></i> Previous
                        </span>
                    }

                    @{
                        var startPage = Math.Max(1, Model.CurrentPage - 2);
                        var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                    }

                    @for (int i = startPage; i <= endPage; i++)
                    {
                        if (i == Model.CurrentPage)
                        {
                            <span class="page-link active">@i</span>
                        }
                        else
                        {
                            <a href="@Url.Action("UserTemplates", new { page = i })" class="page-link">@i</a>
                        }
                    }

                    @if (Model.HasNextPage)
                    {
                        <a href="@Url.Action("UserTemplates", new { page = Model.CurrentPage + 1 })" class="page-link">
                            Next <i class="fas fa-chevron-right"></i>
                        </a>
                    }
                    else
                    {
                        <span class="page-link disabled">
                            Next <i class="fas fa-chevron-right"></i>
                        </span>
                    }
                </div>
            </div>
        }
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const selectAll = document.getElementById('selectAllTemplates');
            const templateCheckboxes = document.querySelectorAll('.select-template');
            const deleteBtn = document.getElementById('deleteTemplatesBtn');

            selectAll.addEventListener('change', () => {
                templateCheckboxes.forEach(cb => cb.checked = selectAll.checked);
            });

            deleteBtn.addEventListener('click', async () => {
                const templateIds = [...document.querySelectorAll('.select-template:checked')]
                    .map(el => parseInt(el.value));

                if (!templateIds.length) {
                    toastr.error('Please select at least one template.');
                    return;
                }

                if (!confirm('Are you sure you want to delete the selected templates?')) {
                    return;
                }

                try {
                    const response = await fetch('/Template/DeleteTemplates', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(templateIds)
                    });
                    const result = await response.json();
                    if (result.success) {
                        toastr.success(result.message);
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        toastr.error(result.message);
                    }
                } catch {
                    toastr.error('Action failed. Please try again.');
                }
            });
        });
    </script>
}

