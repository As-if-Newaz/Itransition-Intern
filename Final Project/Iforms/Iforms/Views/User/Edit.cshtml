@model Iforms.BLL.DTOs.UserUpdateDTO
@{
    ViewData["Title"] = "Edit User Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
<h3> Edit Details </h3>
@if (Model != null)
{
    <div><strong>User Id:</strong> @Model.Id</div>
}
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" id="editUserForm">
            <input type="hidden" asp-for="Id" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="UserName" class="control-label"></label>
                <input asp-for="UserName" class="form-control" />
                <span asp-validation-for="UserName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="UserEmail" class="control-label"></label>
                <input asp-for="UserEmail" class="form-control" />
                <span asp-validation-for="UserEmail" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    @if (HttpContextAccessor.HttpContext.Request.Cookies["Role"] == "Admin")
    {
        <a href="@Url.Action("UserManagement", "AdminDashboard")">Back to User List</a>
    }
    else
    {
        <a href="@Url.Action("Index", "Home")">Back to Home</a>
    }

</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('editUserForm');
            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const formData = new FormData(form);
                const data = {};
                formData.forEach((value, key) => {
                    data[key] = value;
                });

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                    const result = await response.json();
                    if (result.success) {
                        toastr.success(result.message);
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        toastr.error(result.message);
                    }
                } catch {
                    toastr.error('Action failed. Please try again.');
                }
            });

            var modelId = '@Model?.Id';
            var loggedId = '';
            try {
                loggedId = document.cookie.split('; ').find(row => row.startsWith('LoggedId='))?.split('=')[1];
            } catch {}
            if (modelId && loggedId && modelId !== loggedId && '@HttpContextAccessor.HttpContext.Request.Cookies["Role"]' !== 'Admin') {
                window.location.href = '@Url.Action("Index", "Home")';
            }
        });
    </script>
}
