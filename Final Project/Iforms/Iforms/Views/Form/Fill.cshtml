@{
    ViewData["Title"] = "Fill Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Iforms.MVC.Models.FillFormModel

<style>
    .form-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
    }
    
    .template-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .template-title {
        font-size: 2rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }
    
    .template-description {
        font-size: 1.1rem;
        opacity: 0.9;
        margin-bottom: 1rem;
    }
    
    .template-meta {
        display: flex;
        gap: 1rem;
        font-size: 0.9rem;
        opacity: 0.8;
    }
    
    .question-card {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        transition: box-shadow 0.3s ease;
    }
    
    .question-card:hover {
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .question-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #f8f9fa;
    }
    
    .question-description {
        color: #6c757d;
        font-size: 0.95rem;
        margin-bottom: 1rem;
    }
    
    .question-number {
        display: inline-block;
        background: #007bff;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        text-align: center;
        line-height: 30px;
        font-weight: 600;
        margin-right: 0.75rem;
    }
    
    .form-control, .form-select {
        border: 2px solid #e9ecef;
        border-radius: 6px;
        padding: 0.75rem;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }
    
    .form-check-input:checked {
        background-color: #007bff;
        border-color: #007bff;
    }
    
    .options-container {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .option-item {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        transition: background-color 0.2s ease;
    }
    
    .option-item:hover {
        background-color: #f8f9fa;
    }
    
    .option-item input[type="radio"],
    .option-item input[type="checkbox"] {
        margin-right: 0.75rem;
    }
    
    .option-label {
        flex: 1;
        cursor: pointer;
    }
    
    .file-upload-area {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 2rem;
        text-align: center;
        transition: border-color 0.3s ease, background-color 0.3s ease;
        cursor: pointer;
    }
    
    .file-upload-area:hover {
        border-color: #007bff;
        background-color: #f8f9fa;
    }
    
    .file-upload-area.dragover {
        border-color: #007bff;
        background-color: #e3f2fd;
    }
    
    .file-upload-icon {
        font-size: 2rem;
        color: #6c757d;
        margin-bottom: 1rem;
    }
    
    .submit-section {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 2rem;
        margin-top: 2rem;
        text-align: center;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    .btn-submit {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        border: none;
        color: white;
        padding: 1rem 3rem;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 8px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .btn-submit:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        color: white;
    }
    
    .btn-submit:active {
        transform: translateY(0);
    }
    
    .required-indicator {
        color: #dc3545;
        font-weight: 600;
    }
    
    .progress-bar {
        background: #e9ecef;
        border-radius: 10px;
        height: 8px;
        margin-bottom: 2rem;
        overflow: hidden;
    }
    
    .progress-fill {
        background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);
        height: 100%;
        transition: width 0.3s ease;
    }
    
    .validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>

<div class="form-container">
    <div class="template-header">
        <h1 class="template-title">@Model.Template.Title</h1>
        @if (!string.IsNullOrEmpty(Model.Template.Description))
        {
            <p class="template-description">@Model.Template.Description</p>
        }
        <div class="template-meta">
            <span><i class="fas fa-calendar"></i> Created: @Model.Template.CreatedAt.ToString("MMM dd, yyyy")</span>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Template.ImageUrl))
    {
        <div class="text-center my-4">
            <img src="@Model.Template.ImageUrl" alt="Template Image" style="max-width: 730px; max-height: 730px; display: inline-block; border-radius: 16px; box-shadow: 0 6px 24px rgba(0,0,0,0.16);" />
        </div>
    }

    <div class="progress-bar">
        <div class="progress-fill" id="progressFill" style="width: 0%"></div>
    </div>

    <form id="fillForm" action="/Form/Submit" method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <input type="hidden" asp-for="Template.Id" />
        <input type="hidden" asp-for="Template.Title" />
        <input type="hidden" asp-for="Template.Description" />
        <input type="hidden" asp-for="Template.ImageUrl" />
        <input type="hidden" asp-for="Template.IsPublic" />
        <input type="hidden" asp-for="Template.CreatedAt" />
        <input type="hidden" asp-for="Template.CreatedById" />
        
        @for (int i = 0; i < Model.Questions.Count; i++)
        {
            var question = Model.Questions[i];
            var questionIndex = i;
            
            <div class="question-card" data-question-id="@question.Id" data-mandatory="@(question.IsMandatory ? "true" : "false")">
                <div class="question-title">
                    <span class="question-number">@(questionIndex + 1)</span>
                    @question.QuestionTitle
                    @if (question.IsMandatory)
                    {
                        <span class="required-indicator">*</span>
                    }
                </div>
                
                @if (!string.IsNullOrEmpty(question.QuestionDescription) && question.QuestionDescription != question.QuestionTitle)
                {
                    <div class="question-description">@question.QuestionDescription</div>
                }
                
                <input type="hidden" name="Answers[@questionIndex].QuestionId" value="@question.Id" />
                
                @switch (question.QuestionType)
                {
                    case Iforms.DAL.Entity_Framework.Table_Models.Enums.QuestionType.Text:
                        <textarea 
                            name="Answers[@questionIndex].Text" 
                            class="form-control" 
                            rows="4" 
                            placeholder="Enter your answer here..."
                            @(question.IsMandatory ? "required" : null)></textarea>
                        break;
                        
                    case Iforms.DAL.Entity_Framework.Table_Models.Enums.QuestionType.Number:
                        <input 
                            type="number" 
                            name="Answers[@questionIndex].Number" 
                            class="form-control" 
                            placeholder="Enter a number"
                            @(question.IsMandatory ? "required" : null) />
                        break;
                        
                    case Iforms.DAL.Entity_Framework.Table_Models.Enums.QuestionType.Date:
                        <input 
                            type="date" 
                            name="Answers[@questionIndex].Date" 
                            class="form-control"
                            @(question.IsMandatory ? "required" : null) />
                        break;
                        
                    case Iforms.DAL.Entity_Framework.Table_Models.Enums.QuestionType.FileUpload:
                        <div class="file-upload-area" onclick="document.getElementById('file_@question.Id').click()">
                            <div class="file-upload-icon">
                                <i class="fas fa-cloud-upload-alt"></i>
                            </div>
                            <p>Click to upload an image or drag and drop</p>
                            <p class="text-muted">Supported formats: JPG, PNG, JPEG, GIF</p>
                            <input 
                                type="file" 
                                id="file_@question.Id"
                                name="Answers[@questionIndex].FileUrl" 
                                class="d-none"
                                accept="image/*"
                                @(question.IsMandatory ? "required" : null)
                                onchange="handleImageSelect(this, @question.Id)" />
                        </div>
                        <div id="file-info-@question.Id" class="mt-2" style="display: none;">
                            <div class="alert alert-info d-flex align-items-center">
                                <i class="fas fa-file-image me-2"></i>
                                <span id="file-name-@question.Id"></span>
                                <img id="image-preview-@question.Id" src="#" alt="Image Preview" style="max-width: 100px; max-height: 100px; margin-left: 1rem; display: none;" />
                                <button type="button" class="btn btn-sm btn-outline-danger ms-2" onclick="removeFile(@question.Id)">
                                    Remove
                                </button>
                            </div>
                        </div>
                        break;
                    case Iforms.DAL.Entity_Framework.Table_Models.Enums.QuestionType.Checkbox:
                        <div class="options-container">
                        @for (int optIdx = 0; optIdx < question.Options.Count; optIdx++)
                        {
                            var option = question.Options[optIdx];
                            <div class="option-item">
                                <input type="checkbox" id="cb_@question.Id@optIdx" value="@option" onchange="updateCheckboxAnswer(@questionIndex)" />
                                <label class="option-label" for="cb_@question.Id@optIdx">@option</label>
                            </div>
                        }
                        <input type="hidden" name="Answers[@questionIndex].Text" id="cb_answer_@questionIndex" />
                        </div>
                        <script>
                        function updateCheckboxAnswer(qIdx) {
                            var checked = Array.from(document.querySelectorAll('.question-card[data-question-id="' + @question.Id + '"] input[type=checkbox]:checked')).map(cb => cb.value);
                            document.getElementById('cb_answer_' + qIdx).value = checked.join(',');
                        }
                        </script>
                        break;
                }
            </div>
        }
        
        <div class="submit-section">
            <button type="submit" class="btn btn-submit">
                <i class="fas fa-paper-plane"></i>
                Submit Form
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Progress tracking
        function updateProgress() {
            const questions = document.querySelectorAll('.question-card');
            const totalQuestions = questions.length;
            let answeredQuestions = 0;
            
            questions.forEach(question => {
                const inputs = question.querySelectorAll('input, textarea');
                let hasAnswer = false;
                
                inputs.forEach(input => {
                    if (input.type === 'radio' || input.type === 'checkbox') {
                        if (input.checked) hasAnswer = true;
                    } else if (input.type === 'file') {
                        if (input.files.length > 0) hasAnswer = true;
                    } else {
                        if (input.value.trim() !== '') hasAnswer = true;
                    }
                });
                
                if (hasAnswer) answeredQuestions++;
            });
            
            const progressPercentage = totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;
            document.getElementById('progressFill').style.width = progressPercentage + '%';
        }
        
        // File upload handling for images with preview
        function handleImageSelect(input, questionId) {
            const file = input.files[0];
            const fileNameSpan = document.getElementById('file-name-' + questionId);
            const fileInfoDiv = document.getElementById('file-info-' + questionId);
            const imagePreview = document.getElementById('image-preview-' + questionId);
            if (file) {
                fileNameSpan.textContent = file.name;
                fileInfoDiv.style.display = 'block';
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        imagePreview.src = e.target.result;
                        imagePreview.style.display = 'inline-block';
                    };
                    reader.readAsDataURL(file);
                } else {
                    imagePreview.style.display = 'none';
                }
                updateProgress();
            }
        }
        
        function removeFile(questionId) {
            document.getElementById('file_' + questionId).value = '';
            document.getElementById('file-info-' + questionId).style.display = 'none';
            const imagePreview = document.getElementById('image-preview-' + questionId);
            if (imagePreview) imagePreview.style.display = 'none';
            updateProgress();
        }
        
        // Drag and drop for file upload
        document.querySelectorAll('.file-upload-area').forEach(area => {
            area.addEventListener('dragover', function(e) {
                e.preventDefault();
                this.classList.add('dragover');
            });
            
            area.addEventListener('dragleave', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
            });
            
            area.addEventListener('drop', function(e) {
                e.preventDefault();
                this.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    const questionId = this.querySelector('input[type="file"]').id.replace('file_', '');
                    const fileInput = document.getElementById('file_' + questionId);
                    fileInput.files = files;
                    handleImageSelect(fileInput, questionId);
                }
            });
        });
        
        // Form validation and progress tracking
        document.addEventListener('DOMContentLoaded', function() {
            // Track progress on input changes
            document.querySelectorAll('input, textarea').forEach(input => {
                input.addEventListener('input', updateProgress);
                input.addEventListener('change', updateProgress);
            });
            
            // Form submission validation
            document.getElementById('fillForm').addEventListener('submit', function(e) {
                const questions = document.querySelectorAll('.question-card');
                let isValid = true;

                questions.forEach(question => {
                    const isMandatory = question.getAttribute('data-mandatory') === 'true';
                    if (!isMandatory) {
                        // Not required, skip validation
                        question.style.borderColor = '#e9ecef';
                        question.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.05)';
                        return;
                    }
                    let hasAnswer = false;
                    // Check for checkboxes
                    const checkboxes = question.querySelectorAll('input[type="checkbox"]');
                    if (checkboxes.length > 0) {
                        hasAnswer = Array.from(checkboxes).some(cb => cb.checked);
                    } else {
                        // For other types, check all visible inputs and textareas
                        const inputs = question.querySelectorAll('input, textarea');
                        inputs.forEach(input => {
                            if (input.type === 'file') {
                                if (input.files && input.files.length > 0) hasAnswer = true;
                            } else if (input.type === 'radio') {
                                if (input.checked) hasAnswer = true;
                            } else if (input.type === 'hidden') {
                                // skip hidden fields
                            } else {
                                if (input.value && input.value.trim() !== '') hasAnswer = true;
                            }
                        });
                    }
                    if (!hasAnswer) {
                        isValid = false;
                        question.style.borderColor = '#dc3545';
                        question.style.boxShadow = '0 0 0 0.2rem rgba(220, 53, 69, 0.25)';
                    } else {
                        question.style.borderColor = '#e9ecef';
                        question.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.05)';
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    return false;
                }
            });
            
            // Initialize progress
            updateProgress();
        });
    </script>
}
